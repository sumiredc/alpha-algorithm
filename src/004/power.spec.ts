import {solve} from './power';

describe.each([
    [2, 1, '2.00000000'],
    [2, 3, '8.00000000'],
    [2.1, 3, '9.26100000'],
    [2, -2, '0.25000000'],
    [1.12345678, -1073741824, '0.00000000'],
    [1.00000001, -214748, '0.99785482'],
    [1.00000001, 214748, '1.00214979'],
    [1.00000001, 1, '1.00000001'],
    [1.00000001, 2, '1.00000002'],
    [1.00000001, 3, '1.00000003'],
    [1.00000001, 4, '1.00000004'],
    [1.00000001, 5, '1.00000005'],
    [1.00000001, 6, '1.00000006'],
    [1.00000001, 7, '1.00000007'],
    [1.00000001, 8, '1.00000008'],
    [1.00000001, 9, '1.00000009'],
    [1.00000001, 10, '1.00000010'],
    [1.00000001, 11, '1.00000011'],
    [1.00000001, 12, '1.00000012'],
    [1.00000001, 13, '1.00000013'],
    [1.00000001, 14, '1.00000014'],
    [1.00000001, 15, '1.00000015'],
    [1.00000001, 16, '1.00000016'],
    [1.00000001, 17, '1.00000017'],
    [1.00000001, 18, '1.00000018'],
    [1.00000001, 19, '1.00000019'],
    [1.00000001, 20, '1.00000020'],
    [1.00000001, 21, '1.00000021'],
    [3, 2, '9.00000000'],
    [3, 4, '81.00000000'],
    [3, 5, '243.00000000'],
    [3, 6, '729.00000000'],
    [3, 7, '2187.00000000'],
])('power', (x: number, n: number, expected: string) => {
    it(`solve ${x} ${n}`, () => {
        const actual = solve(x, n);
        expect(actual.toFixed(8)).toBe(expected);
    });
});
